<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1088979_eclectic.EIQAPIcalls</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>EIQAPIcalls</name>
        <script><![CDATA[var EIQAPIcalls = Class.create();
EIQAPIcalls.prototype = {
    initialize: function() {},

    count_observables: function(last_updated_time) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.Fetch EIQ Observable', 'Count Observable');
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameter('query_key', encodeURIComponent('filter[>last_updated_at]'));
            request.setStringParameterNoEscape('query_value', last_updated_time);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Create Sighting API with status: " + httpStatus;
            }
            gs.info("Completed Count Observable API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    fetch_observables_with_date: function(offset, limit, last_updated_time) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.Fetch EIQ Observable', 'Fetch EIQ Observable');
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameter('query_key', encodeURIComponent('filter[>last_updated_at]'));
            request.setStringParameterNoEscape('offset', offset);
            request.setStringParameterNoEscape('query_value', last_updated_time);
            request.setStringParameterNoEscape('limit', limit);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Create Sighting API with status: " + httpStatus;
            }
            gs.info("Completed List-Observable API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    fetch_observables: function(config, offset, limit) {
        offset = offset || 0;
        limit = limit || 100;
        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.Fetch EIQ Observable', 'Fetch EIQ Observable');
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameter('query_key', encodeURIComponent('filter[>last_updated_at]'));
            request.setStringParameterNoEscape('offset', offset);
            request.setStringParameterNoEscape('query_value', config["observable_last_checkout"]["value"].replace(" ", "T"));
            request.setStringParameterNoEscape('limit', limit);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Create Sighting API with status: " + httpStatus;
            }
            gs.info("Completed List-Observable API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
        }
    },

    observable_lookup_call: function(observable_value) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();

        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.EIQObservableCRUD', 'Lookup EIQ Observable');
            request.setStringParameterNoEscape('observable_value', observable_value);
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setStringParameter('query_key', encodeURIComponent('filter[value]'));
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Create Sighting API with status: " + httpStatus;
            }
            gs.info("Completed observable API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }

    },

    get_source_call: function(source_id) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();

        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.Get EIQ Source', 'Get EIQ Source');
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameterNoEscape('source_id', source_id);
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Create Sighting API with status: " + httpStatus;
            }
            gs.info("Completed Get-Source API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    list_source_call: function(offset, limit) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        offset = offset || 0;
        limit = limit || 100;

        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.List of Sources', 'List of Sources');
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameterNoEscape('offset', offset);
            request.setStringParameterNoEscape('limit', limit);
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Create Sighting API with status: " + httpStatus;
            }
            gs.info("Completed List-Source API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    create_entity: function(body) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.Create Entity', 'Create Entity');
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            request.setRequestHeader("Content-Type", "application/json");
            request.setRequestBody(JSON.stringify(body));
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 201) {
                throw "Error with Create Entity API with status: " + httpStatus;
            }
            gs.info("Completed Create Entity API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    create_observable: function(body) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.EIQObservableCRUD', 'CreateObservable');
            request.setStringParameterNoEscape('version', config["version"]["value"]);
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            request.setRequestHeader("Content-Type", "application/json");
            request.setRequestBody(JSON.stringify(body));
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if ((httpStatus != 201) && (httpStatus != 409)) {
                throw "Error with Create Observable API with status: " + httpStatus;
            }
            gs.info("Completed Create Observable API call with status code: " + httpStatus);
            return httpStatus;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    list_feed_ids_call: function(configs, values) {
        // executing from config page, so need config and values from there
        try {
            var api_token = values[configs.api_token.sys_id];
            var encoded_api_token = encodeURIComponent(api_token);
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.OutgoingFeedAPIs', 'getFilterList');
            request.setStringParameterNoEscape('version', values[configs.version.sys_id]);
            request.setStringParameterNoEscape('base_url', values[configs.base_url.sys_id]);
            request.setRequestHeader("Authorization", "Bearer " + encoded_api_token);
            var response = request.execute();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                gs.error("Error with Feed List API with status: " + httpStatus);
            }else{
				gs.info("Completed Feed List API call with status code: " + httpStatus);
			}
            return response;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    get_outgoing_feeds: function(feed_id, config) {
        try {
            var request = new sn_ws.RESTMessageV2('x_1088979_eclectic.OutgoingFeedAPIs', 'OutgoingFeedContentList');
            request.setStringParameterNoEscape('feed_id', feed_id);
            request.setStringParameterNoEscape('base_url', config["base_url"]["value"]);
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Getting the outgoing feeds API with status: " + httpStatus;
            }
            gs.info("Completed Outgoing Feed API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },

    get_content_block_data: function(content_block_url) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        content_block_url = config["base_url"]["value"] + content_block_url;

        try {
            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint(content_block_url);
            request.setHttpMethod("get");
            request.setRequestHeader("Authorization", "Bearer " + config["api_token"]["value"]);
            var response = request.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            if (httpStatus != 200) {
                throw "Error with Content Block API with status: " + httpStatus;
            }
			gs.info("Completed Content Block <" + content_block_url + ">API call with status code: " + httpStatus);
            return responseBody;
        } catch (ex) {
            var message = ex.message;
            gs.error(message);
            return "";
        }
    },


    type: 'EIQAPIcalls'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-07 11:34:50</sys_created_on>
        <sys_id>3a9d054f2f37211055a656e62799b6fa</sys_id>
        <sys_mod_count>62</sys_mod_count>
        <sys_name>EIQAPIcalls</sys_name>
        <sys_package display_value="EclecticIQ Intelligence Center Integration for Security Operations" source="x_1088979_eclectic">abb96d122f33211055a656e62799b6f9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="EclecticIQ Intelligence Center Integration for Security Operations">abb96d122f33211055a656e62799b6f9</sys_scope>
        <sys_update_name>sys_script_include_3a9d054f2f37211055a656e62799b6fa</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-07 12:28:01</sys_updated_on>
    </sys_script_include>
</record_update>
