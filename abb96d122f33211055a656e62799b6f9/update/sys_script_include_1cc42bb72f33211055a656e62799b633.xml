<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1088979_eclectic.DataIngestion</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DataIngestion</name>
        <script><![CDATA[var DataIngestion = Class.create();
DataIngestion.prototype = {
    OBSERVABLE_TABLE: "x_1088979_eclectic_eiq_observable",
    SOURCE_TABLE: "x_1088979_eclectic_eiq_source",
    M2M_OBSERVABLE_SOURCE_TABLE: "x_1088979_eclectic_m2m_x_1088979_ec_x_1088979_ec",

    initialize: function() {},

    get_platform_link: function(observable_type, observable_value) {
        var eiq_util = new x_1088979_eclectic.EIQConfigurationUtils();
        var config = eiq_util.getConfigurationByIntItemConfigId();
        return config["base_url"]["value"] + "observables/" + observable_type + "/" + observable_value;
    },

    convert_str_to_datetime: function(value) {
        value = value.split(".")[0].replace("T", " ");
        var gdt = new GlideDateTime();
        gdt.setValue(value);
        return gdt;
    },

    observable_snow_table_ingestion: function(observable_data) {
        var instance = new GlideRecord(this.OBSERVABLE_TABLE);
        var created = instance.get("value", observable_data.value);
        instance.observable_id = observable_data.id;
        instance.type = observable_data.type;
        instance.value = observable_data.value;
        instance.maliciousness = observable_data.meta.maliciousness;
        instance.platform_link = this.get_platform_link(observable_data.type, observable_data.value);
        instance.created_at = this.convert_str_to_datetime(observable_data.created_at);
        instance.last_updated_at = this.convert_str_to_datetime(observable_data.last_updated_at);
        var observable_sys_id = "";
        if (created == true) {
            observable_sys_id = instance.update();
        } else {
            observable_sys_id = instance.insert();
        }
        return observable_sys_id;

    },

    source_snow_table_ingestion: function(source_data) {
        var instance = new GlideRecord(this.SOURCE_TABLE);
        var created = instance.get("name", source_data.name);
        instance.name = source_data.name;
        instance.reliability = source_data.reliability;
        instance.source_id = source_data.id;
        instance.source_type = source_data.source_type;
        var source_sys_id = "";
        if (created == true) {
            source_sys_id = instance.update();
        } else {
            source_sys_id = instance.insert();
        }
        return source_sys_id;

    },

    m2m_source_observable_snow_table_ingestion: function(source_sys_id, observable_sys_id) {
        var instance = new GlideRecord(this.M2M_OBSERVABLE_SOURCE_TABLE);
        instance.addQuery("x_1088979_eclectic_eiq_source", source_sys_id);
        instance.addQuery("x_1088979_eclectic_eiq_observable", observable_sys_id);
        instance.query();

        var present = false;
        while (instance.next()) {
            present = true;
            break;
        }
        if (present == false) {
            instance.x_1088979_eclectic_eiq_source = source_sys_id;
            instance.x_1088979_eclectic_eiq_observable = observable_sys_id;
            instance.insert();
        }
    },

    sources_ingestion: function(sources, observable_sys_id) {
		var api_caller = new x_1088979_eclectic.EIQAPIcalls();
        for (var source_number = 0; source_number < sources.length; source_number++) {
            var source_id = sources[source_number].split("sources/")[1];
            var source_data = api_caller.get_source_call(source_id);
            source_data = JSON.parse(source_data);
            if (source_data && source_data.data) {
                var source_sys_id = this.source_snow_table_ingestion(source_data.data);
                if (observable_sys_id && source_sys_id) {
                    this.m2m_source_observable_snow_table_ingestion(source_sys_id, observable_sys_id);
                }
            }

        }
    },

    observable_ingestion: function(observable_value) {
        var api_caller = new x_1088979_eclectic.EIQAPIcalls();
        var observable_data = api_caller.observable_lookup_call(observable_value);
        observable_data = JSON.parse(observable_data);

        if (observable_data.count > 0) {
            observable_data = observable_data.data[0];
            var observable_sys_id = this.observable_snow_table_ingestion(observable_data);
			this.sources_ingestion(observable_data.sources, observable_sys_id);			
        }
    },

    type: 'DataIngestion'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-10 07:35:29</sys_created_on>
        <sys_id>1cc42bb72f33211055a656e62799b633</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>DataIngestion</sys_name>
        <sys_package display_value="EclecticIQ Intelligence Center" source="x_1088979_eclectic">abb96d122f33211055a656e62799b6f9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="EclecticIQ Intelligence Center">abb96d122f33211055a656e62799b6f9</sys_scope>
        <sys_update_name>sys_script_include_1cc42bb72f33211055a656e62799b633</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-10 09:19:44</sys_updated_on>
    </sys_script_include>
</record_update>
